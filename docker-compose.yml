version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - BACKEND_URL=http://backend:4000
      - PUBLIC_BACKEND_URL=http://localhost:4000
      - FRONTEND_URL=http://localhost:3000
      - JWT_SECRET=voting-system-secret-key
      - VOTE_TOKEN_EXPIRY=5m
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    depends_on:
      - backend
    command: sh -c "cd /app && npm install --legacy-peer-deps && npm run dev"

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=development
      - PORT=4000
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=voting
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=postgres
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/voting
      - DB_FORCE_SYNC=true
      - REDIS_URL=redis://redis:6379
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=localstack
      - AWS_SECRET_ACCESS_KEY=localstack
      - SQS_ENDPOINT=http://localstack:4566
      - SQS_VOTE_QUEUE_URL=http://localstack:4566/000000000000/votes-queue
      - CORS_ORIGIN=http://localhost:3000
      - JWT_SECRET=voting-system-secret-key
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      localstack:
        condition: service_started
    restart: unless-stopped
    command: npm run dev

  worker:
    build:
      context: ./worker
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=development
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=voting
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=postgres
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/voting
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=localstack
      - AWS_SECRET_ACCESS_KEY=localstack
      - SQS_ENDPOINT=http://localstack:4566
      - SQS_VOTE_QUEUE_URL=http://localstack:4566/000000000000/votes-queue
    volumes:
      - ./worker:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      localstack:
        condition: service_started
    command: npm run dev

  postgres:
    image: postgres:14
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=voting
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    command: redis-server --save 60 1 --loglevel warning
    volumes:
      - redis-data:/data

  localstack:
    image: localstack/localstack
    ports:
      - "4566:4566"
    environment:
      - SERVICES=sqs
      - DEBUG=1
    volumes:
      - ./scripts/init-localstack.sh:/docker-entrypoint-initaws.d/init-localstack.sh

volumes:
  postgres-data:
  redis-data:
  frontend_node_modules: